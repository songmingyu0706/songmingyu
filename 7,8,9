{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled4.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyNEO8lOHV5ppSeH5gzGb0Ry",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/songmingyu0706/songmingyu/blob/main1/7%2C8%2C9\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tzVairn2sYlm"
      },
      "outputs": [],
      "source": [
        "import turtle\n",
        "t = turtle.Turtle()\n",
        "t.shape(\"turtle\")\n",
        "t.color(\"black\", \"white\")\n",
        "s = turtle.Screen(); s.bgcolor('skyblue');\n",
        "def draw_snowman(x, y):\n",
        "t.up()\n",
        "t.goto(x, y)\n",
        "t.down()\n",
        "t.begin_fill()\n",
        "t.circle(20)\n",
        "t.end_fill()\n",
        "t.goto(x, y-25)\n",
        "t.setheading(135)\n",
        "t.forward(50)\n",
        "t.backward(50)\n",
        "t.setheading(30)\n",
        "t.forward(50)\n",
        "t.backward(50)\n",
        "t.setheading(0)\n",
        "t.begin_fill()\n",
        "t.circle(15)\n",
        "t.end_fill()\n",
        "t.goto(x, y-70)\n",
        "t.begin_fill()\n",
        "t.circle(30)\n",
        "t.end_fill()\n",
        "draw_snowman(0, 0)\n",
        "draw_snowman(100, 0)\n",
        "draw_snowman(200, 0)\n",
        "\n",
        "import turtle\n",
        "t = turtle.Turtle()\n",
        "t.shape(\"turtle\")\n",
        "t.speed(0)\n",
        "def hexagon():\n",
        "for i in range(6):\n",
        "turtle.forward(100)\n",
        "turtle.left(360/6)\n",
        "for i in range (6):\n",
        "hexagon()\n",
        "turtle.forward(100)\n",
        "turtle.right(60)\n",
        "\n",
        "import turtle\n",
        "t = turtle.Turtle()\n",
        "t.shape(\"turtle\")\n",
        "t.speed(0)\n",
        "def f(x):\n",
        "return x**2+1\n",
        "t.goto(200, 0)\n",
        "t.goto(0, 0)\n",
        "t.goto(0, 200)\n",
        "t.goto(0, 0)\n",
        "for x in range(150):\n",
        "t.goto(x, int(0.01*f(x)))\n",
        "\n",
        "import turtle\n",
        "t = turtle.Turtle()\n",
        "t.shape(\"turtle\")\n",
        "t.speed(0)\n",
        "def draw_line():\n",
        "t.forward(100)\n",
        "t.backward(100)\n",
        "for x in range(12):\n",
        "t.right(30)\n",
        "draw_line()\n",
        "\n",
        "def happyBirthday(person):\n",
        "print(\"Happy Birthday to you!\")\n",
        "print(\"Happy Birthday to you!\")\n",
        "print(\"Happy Birthday, dear \" + person)\n",
        "print(\"Happy Birthday to you!\")\n",
        "happyBirthday(\"홍길동\")\n",
        "\n",
        "def sumProblem(x, y):\n",
        "sum = x + y\n",
        "sentence = \"정수\" + str(x) + \"+\"+str(y)+\"의 합은?\"\n",
        "print(sentence)\n",
        "def main():\n",
        "a = int(input(\"첫 번째 정수: \"))\n",
        "b = int(input(\"두 번째 정수: \"))\n",
        "sumProblem(a, b)\n",
        "main()\n",
        "\n",
        "PI = 3.14159265358979\n",
        "def circleArea(radius):\n",
        "return PI*radius*radius\n",
        "def circleCircumference(radius):\n",
        "return 2*PI*radius\n",
        "def main():\n",
        "print('반지름이 5인 원의 면적:', circleArea(5))\n",
        "print('반지름이 5인 원의 둘레:', circleCircumference(5))\n",
        "main()\n",
        "\n",
        "def add(a, b):\n",
        "print( \"(%d + %d)\" % (a, b), end=\" \")\n",
        "return a + b\n",
        "def subtract(a, b):\n",
        "print (\"(%d - %d)\" % (a, b), end=\" \")\n",
        "return a - b\n",
        "def multiply(a, b):\n",
        "print (\"(%d * %d)\" % (a, b), end=\" \")\n",
        "return a * b\n",
        "def divide(a, b):\n",
        "print (\"(%d / %d)\" % (a, b), end=\" \")\n",
        "return a / b\n",
        "what = add(20, 10)\n",
        "print(\"= \", what)\n",
        "\n",
        "alist = []\n",
        "sum = 0\n",
        "for i in range(5):\n",
        "i = int(input(\"정수를 입력하시오: \"))\n",
        "alist.append(i)\n",
        "for i in alist:\n",
        "sum += i\n",
        "avg = sum/len(alist)\n",
        "print(\"평균=\", avg)\n",
        "\n",
        "import random\n",
        "counters = [0, 0, 0, 0, 0, 0]\n",
        "for i in range(1000):\n",
        "value = random.randint(0, 5)\n",
        "counters[value] = counters[value] + 1\n",
        "for i in range(6) :\n",
        "print(\"주사위가 \", i+1, \"인 경우는 \", counters[i], \"번\")\n",
        "\n",
        "contacts = { }\n",
        "while True:\n",
        "name = input(\"(입력모드)이름을 입력하시오: \")\n",
        "if not name:\n",
        "break;\n",
        "tel = input(\"전화번호를 입력하시오: \")\n",
        "contacts[name] = tel\n",
        "while True:\n",
        "name = input(\"(검색모드)이름을 입력하시오: \")\n",
        "if not name:\n",
        "break;\n",
        "if name in contacts :\n",
        "print(name, \"의 전화번호는\", contacts[name], \"입니다.\")\n",
        "else:\n",
        "\n",
        "  import turtle\n",
        "import random\n",
        "t = turtle.Turtle()\n",
        "t.shape(\"turtle\")\n",
        "def draw_square(x, y, c):\n",
        "t.up()\n",
        "t.goto(x, y)\n",
        "t.down()\n",
        "t.color(\"black\",c)\n",
        "t.begin_fill()\n",
        "t.forward(100)\n",
        "t.left(90)\n",
        "t.forward(100)\n",
        "t.left(90)\n",
        "t.forward(100)\n",
        "t.left(90)\n",
        "t.forward(100)\n",
        "t.left(90)\n",
        "t.end_fill()\n",
        "for c in [\"yellow\", \"red\", \"purple\", \"blue\"]:\n",
        "x = random.randint(-100, 100)\n",
        "y = random.randint(-100, 100)\n",
        "draw_square(x, y, c)\n",
        "\n",
        "import turtle\n",
        "import random\n",
        "t = turtle.Turtle()\n",
        "s = turtle.Screen()\n",
        "def draw_shape(t, c, length, sides, x, y):\n",
        "t.up()\n",
        "t.goto(x, y)\n",
        "t.down()\n",
        "t.fillcolor(c)\n",
        "angle = 360.0 / sides\n",
        "t.begin_fill()\n",
        "for dist in range(sides):\n",
        "t.forward(length)\n",
        "t.left(angle)\n",
        "t.end_fill()\n",
        "for i in range(10):\n",
        "color = random.choice([ 'white', 'yellow', 'blue', 'skyblue', 'orange', 'green' ])\n",
        "side_length = random.randint(10, 100)\n",
        "sides = random.randint(3, 10)\n",
        "x = random.randint(-200, 200)\n",
        "y = random.randint(-200, 200)\n",
        "draw_shape(t, color, side_length, sides, x, y)\n",
        "\n",
        "import turtle\n",
        "import random\n",
        "t = turtle.Turtle()\n",
        "s = turtle.Screen()\n",
        "s.bgcolor(\"black\")\n",
        "def draw_star(aturtle, color, side_length, x, y):\n",
        "aturtle.color(color)\n",
        "aturtle.begin_fill()\n",
        "aturtle.penup()\n",
        "aturtle.goto(x, y)\n",
        "aturtle.pendown()\n",
        "for i in range(5):\n",
        "aturtle.forward(side_length)\n",
        "aturtle.right(144)\n",
        "aturtle.forward(side_length)\n",
        "aturtle.end_fill()\n",
        "for i in range(20):\n",
        "color = random.choice([ 'white', 'yellow', 'blue', 'skyblue', 'orange', 'green' ])\n",
        "side_length = random.randint(10, 100)\n",
        "x = random.randint(-200, 200)\n",
        "y = random.randint(-200, 200)\n",
        "draw_star(t, color, side_length, x, y)\n",
        "\n",
        "domains = { \"kr\": \"대한민국\", \"us\": \"미국\",\"jp\": \"일본\", \"de\": \"독일\", \"sk\": \"슬로바키아\n",
        "\", \"hu\": \"헝가리\", \"no\": \"노르웨이\" }\n",
        "for k, v in domains.items():\n",
        "print (k, \": \", v)\n",
        "\n",
        "problems = {'파이썬': '최근에 가장 떠오르는 프로그래밍 언어',\n",
        "'변수': '데이터를 저장하는 메모리 공간',\n",
        "'함수': '작업을 수행하는 문장들의 집합에 이름을 붙인것',\n",
        "'리스트': '서로 관련이 없는 항목들의 모임',\n",
        "}\n",
        "def show_words(problems):\n",
        "display_message = \"\"\n",
        "i=1\n",
        "for word in problems.keys():\n",
        "display_message += \"(\"+str(i)+\")\"\n",
        "display_message += word + \" \"\n",
        "i+=1\n",
        "print(display_message)\n",
        "for meaning in problems.values():\n",
        "print(\"다음은 어떤 단어에 대한 설명일까요? \")\n",
        "print(\"\\\"\"+meaning+\"\\\"\")\n",
        "correct = False\n",
        "while not correct:\n",
        "show_words(problems)\n",
        "guessed_word = input(\"\")\n",
        "if problems[guessed_word] == meaning:\n",
        "print(\"정답입니다. !\")\n",
        "correct = True\n",
        "else:\n",
        "print(\"정답이 아닙니다.\")\n",
        "\n",
        "from tkinter import Tk, Label, Button\n",
        "def greet():\n",
        "print(\"파이썬에 오신 것을 환영합니다. \")\n",
        "window = Tk()\n",
        "label = Label(window, text=\"간단한 GUI 프로그램!\")\n",
        "label.pack()\n",
        "greet_button = Button(window, text=\"환영합니다.\", command=greet)\n",
        "greet_button.pack()\n",
        "close_button = Button(window, text=\"종료\", command=window.quit)\n",
        "close_button.pack()\n",
        "window.mainloop()\n",
        "\n",
        "from tkinter import Tk, Label, Button, Entry, IntVar, END, W, E\n",
        "def update_add():\n",
        "update(\"add\")\n",
        "def update_subtract():\n",
        "update(\"subtract\")\n",
        "def update_reset():\n",
        "update(\"reset\")\n",
        "window = Tk()\n",
        "total = 0\n",
        "sum = Label(window)\n",
        "sum.grid(row=0, column=1, columnspan=2)\n",
        "label = Label(window, text=\"현재 합계:\")\n",
        "label.grid(row=0, column=0)\n",
        "entry = Entry(window)\n",
        "entry.grid(row=1, column=0, columnspan=3)\n",
        "add_button = Button(window, text=\"더하기(+)\", command=update_add)\n",
        "subtract_button = Button(window, text=\"빼기(-)\", command=update_subtract)\n",
        "reset_button = Button(window, text=\"초기화\", command=update_reset)\n",
        "add_button.grid(row=2, column=0)\n",
        "subtract_button.grid(row=2, column=1)\n",
        "reset_button.grid(row=2, column=2)\n",
        "def update(method):\n",
        "global total\n",
        "if method == \"add\":\n",
        "total += int(entry.get())\n",
        "elif method == \"subtract\":\n",
        "total -= int(entry.get())\n",
        "else:\n",
        "total = 0\n",
        "sum['text'] = str(total)\n",
        "entry.delete(0, END)\n",
        "window.mainloop()\n",
        "\n",
        "import random\n",
        "from tkinter import *\n",
        "window = Tk()\n",
        "secret_number = random.randint(1, 100)\n",
        "guess = None\n",
        "num_guesses = 0\n",
        "def guess_number():\n",
        "global num_guesses\n",
        "guess = int(entry.get())\n",
        "num_guesses += 1\n",
        "if guess == secret_number:\n",
        "message = \"축하합니다!!\"\n",
        "elif guess < secret_number:\n",
        "message = \"너무 낮아요!!\"\n",
        "else:\n",
        "message = \"너무 높아요!!\"\n",
        "label['text']= message\n",
        "def reset():\n",
        "global num_guesses\n",
        "entry.delete(0, END)\n",
        "secret_number = random.randint(1, 100)\n",
        "guess = 0\n",
        "num_guesses = 0\n",
        "message = \"1부터 100사이의 숫자를 추측하시오\"\n",
        "label['text']= message\n",
        "message = \"1부터 100사이의 숫자를 추측하시오\"\n",
        "label = Label(window, text=message)\n",
        "entry = Entry(window)\n",
        "guess_button = Button(window, text=\"숫자를 입력\", command=guess_number)\n",
        "reset_button = Button(window, text=\"게임을 다시 실행\", command=reset)\n",
        "label.grid(row=0, column=0, columnspan=2, sticky=W+E)\n",
        "entry.grid(row=1, column=0, columnspan=2, sticky=W+E)\n",
        "guess_button.grid(row=2, column=0)\n",
        "reset_button.grid(row=2, column=1)\n",
        "window.mainloop()\n",
        "\n",
        "from tkinter import *\n",
        "def do_convert():\n",
        "inch_val = float(cvt_from.get())\n",
        "centimeters_val = inch_val * 2.54\n",
        "cvt_to.set('%s 센티미터' % centimeters_val)\n",
        "root = Tk()\n",
        "cvt_from = StringVar()\n",
        "cvt_to = StringVar()\n",
        "lbl = Label(root, text='인치를 센티미디로 변환하는 프로그램:')\n",
        "lbl.grid(row=0, column=0, columnspan=2)\n",
        "from_lbl = Label(root, text='인치를 입력하시오:')\n",
        "from_lbl.grid(row=1, column=0)\n",
        "from_entry = Entry(root, textvariable=cvt_from)\n",
        "from_entry.grid(row=1, column=1)\n",
        "to_lbl = Label(root, text='변환결과:')\n",
        "to_lbl.grid(row=2, column=0)\n",
        "result_lbl = Label(root,\n",
        "textvariable=cvt_to)\n",
        "result_lbl.grid(row=2, column=1)\n",
        "convert_btn = Button(root,\n",
        "text='변환!', command=do_convert)\n",
        "convert_btn.grid(row=3, column=1)\n",
        "root.mainloop()"
      ]
    }
  ]
}
{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled7.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyPSG2yJcJZcrzeznunXjSMZ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/songmingyu0706/songmingyu/blob/main1/%EB%8F%84%EC%A0%84%EB%AC%B8%EC%A0%9C8-14\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WcB0OBG67uAL"
      },
      "outputs": [],
      "source": [
        "import turtle\n",
        "import random\n",
        "screen = turtle.Screen()\n",
        "image1 =\"D:/rabbit.gif\"\n",
        "image2 =\"D:/turtle.gif\"\n",
        "image3 =\"D:/turtle2.gif\"\n",
        "screen.addshape(image1)\n",
        "screen.addshape(image2)\n",
        "screen.addshape(image3)\n",
        "t1 = turtle.Turtle()\n",
        "t1.shape(image1)\n",
        "t1.pensize(5)\n",
        "t1.penup()\n",
        "t1.goto(-300, 0)\n",
        "t2 = turtle.Turtle()\n",
        "t2.shape(image2)\n",
        "t2.pensize(5)\n",
        "t2.penup()\n",
        "t2.goto(-300, -100)\n",
        "t3 = turtle.Turtle()\n",
        "t3.shape(image2)\n",
        "t3.pensize(5)\n",
        "t3.penup()\n",
        "t3.goto(-300, -200)\n",
        "t1.pendown()\n",
        "t2.pendown()\n",
        "t3.pendown()\n",
        "t1.speed(1)\n",
        "t2.speed(1)\n",
        "t3.speed(1)\n",
        "for i in range(100):\n",
        "d1 = random.randint(1, 60)\n",
        "t1.forward(d1)\n",
        "d2 = random.randint(1, 60)\n",
        "t2.forward(d2)\n",
        "d3 = random.randint(1, 60)\n",
        "t3.forward(d3)]\n",
        "\n",
        "import random\n",
        "question = [\"56 / 8\", \"8 * 9\", \"50 - 25\", \"1 + 6\", \"81 / 9\",\n",
        "\"22 + 10\", \"8 / 4\", \"9 * 7\", \"17 - 4\", \"3 + 5\"]\n",
        "dailyQuestion = random.choice(question)\n",
        "print(\"#########################\")\n",
        "print(\"# 오늘의 산수 문제 #\")\n",
        "print(\"#########################\")\n",
        "print(\"\")\n",
        "print(dailyQuestion)\n",
        "\n",
        "items = {\"커피음료\": 7, \"펜\": 3, \"종이컵\": 2, \"우유\": 1, \"콜라\": 4, \"책\": 5}\n",
        "while True:\n",
        "print(\"\")\n",
        "print(\"# 재고 목록 #\")\n",
        "for key in sorted(items.keys()):\n",
        "print(key, items[key])\n",
        "print(\"\\n********************\")\n",
        "print(\"0. 종료\")\n",
        "print(\"1. 재고 추가\")\n",
        "print(\"2. 재고 삭제\")\n",
        "print(\"********************\\n\")\n",
        "a = int(input(\"무엇을 하시겠습니까?: \"))\n",
        "if a == 1:\n",
        "item = input(\"물건의 이름을 입력하시오: \")\n",
        "num = input(\"몇개를 추가하시겠습니까? :\")\n",
        "items[item] = int(items[item]) + int(num)\n",
        "elif a == 2:\n",
        "item = input(\"물건의 이름을 입력하시오: \")\n",
        "num = input(\"몇개를 삭제하시겠습니까? :\")\n",
        "items[item] = int(items[item]) - int(num)\n",
        "else:\n",
        "break\n",
        "\n",
        "english_dict = dict()\n",
        "english_dict['하나'] = 'one'\n",
        "english_dict['둘'] = 'two'\n",
        "english_dict['셋'] = 'three'\n",
        "word = input(\"단어를 입력하시오: \")\n",
        "print (english_dict[word])\n",
        "\n",
        "\n",
        "import smtplib\n",
        "from email.mime.text import MIMEText\n",
        "me = 'abc@server.kr'\n",
        "you = ['def1@server.com','def2@server.com','def3@server.com']\n",
        "소\n",
        "contents = '12월 20일에 동창회가 있으니 참석해주시기 바랍니다.'\n",
        "msg = MIMEText(contents, _charset='euc-kr')\n",
        "msg['Subject'] = '동창회 모임'\n",
        "msg['From'] = me\n",
        "msg['To'] = you\n",
        "server = smtplib.SMTP('smtp.gmail.com', 587)\n",
        "server.ehlo()\n",
        "server.starttls()\n",
        "server.ehlo()\n",
        "server.login(\"자신의 아이디\", \"패스워드\")\n",
        "for i in range(len(you)):\n",
        "server.sendmail(me, you[i], msg.as_string())\n",
        "server.quit()\n",
        "\n",
        "from tkinter import *\n",
        "def process():\n",
        "temperature = float(e1.get())\n",
        "mytemp = (temperature-32)*5/9\n",
        "e2.insert(0, str(mytemp))\n",
        "def process2():\n",
        "temperature = float(e2.get())\n",
        "mytemp = (temperature*(9/5))+32\n",
        "e1.insert(0, str(mytemp))\n",
        "window = Tk()\n",
        "l1 = Label(window, text = \"화씨\")\n",
        "l2 = Label(window, text = \"섭씨\")\n",
        "l1.grid(row = 0, column = 0)\n",
        "l2.grid(row = 1, column = 0)\n",
        "e1 = Entry(window)\n",
        "e2 = Entry(window)\n",
        "e1.grid(row = 0, column = 1)\n",
        "e2.grid(row = 1, column = 1)\n",
        "b1 = Button(window, text = \"화씨 -> 섭씨\", command=process)\n",
        "b2 = Button(window, text = \"섭씨 -> 화씨\", command=process2)\n",
        "b1.grid(row = 2, column = 0)\n",
        "b2.grid(row = 2, column = 1)\n",
        "window.mainloop()\n",
        "\n",
        "from tkinter import *\n",
        "window = Tk()\n",
        "w = Button(window, text = \"버튼1\", bg=\"red\", fg=\"white\")\n",
        "w.place(x=0, y=0)\n",
        "w = Button(window, text = \"버튼2\", bg=\"orange\", fg=\"white\")\n",
        "w.place(x=20, y=20)\n",
        "w = Button(window, text = \"버튼3\", bg=\"yellow\", fg=\"white\")\n",
        "w.place(x=40, y=40)\n",
        "w = Button(window, text = \"버튼4\", bg=\"green\", fg=\"white\")\n",
        "w.place(x=60, y=60)\n",
        "w = Button(window, text = \"버튼5\", bg=\"blue\", fg=\"white\")\n",
        "w.place(x=80, y=80)\n",
        "window.mainloop()\n",
        "\n",
        "from tkinter import *\n",
        "def paint(event):\n",
        "global lastx, lasty\n",
        "x, y = (event.x),(event.y)\n",
        "canvas.create_line(lastx,lasty,x,y,fill = \"black\")\n",
        "lastx,lasty = x,y\n",
        "def activate_paint(event):\n",
        "global lastx, lasty\n",
        "lastx, lasty = (event.x),(event.y)\n",
        "def release(event):\n",
        "global lastx, lasty\n",
        "if (lastx, lasty) == (event.x,event.y):\n",
        "canvas.create_line(lastx,lasty,lastx+1,lasty+1)\n",
        "lastx,lasty = None, None\n",
        "window = Tk()\n",
        "canvas = Canvas(window)\n",
        "canvas.pack()\n",
        "canvas.bind('<B1-Motion>',paint)\n",
        "canvas.bind('<ButtonPress-1>', activate_paint)\n",
        "canvas.bind('<ButtonRelease-1>',release)\n",
        "window.mainloop()\n",
        "\n",
        "from tkinter import *\n",
        "mycolor = \"blue\"\n",
        "def paint(event):\n",
        "x1,y1 = (event.x-1), (event.y+1)\n",
        "x2,y2 = (event.x-1), (event.y+1)\n",
        "canvas.create_oval(x1, y1, x2, y2, fill = mycolor)\n",
        "def change_color_red():\n",
        "global mycolor\n",
        "mycolor = \"red\"\n",
        "def change_color_green():\n",
        "global mycolor\n",
        "mycolor = \"green\"\n",
        "def change_color_yellow():\n",
        "global mycolor\n",
        "mycolor = \"yellow\"\n",
        "window = Tk()\n",
        "canvas = Canvas(window)\n",
        "canvas.pack()\n",
        "canvas.bind(\"<B1-Motion>\", paint)\n",
        "button = Button(window, text=\"빨간색\", command=change_color_red)\n",
        "button.pack()\n",
        "button = Button(window, text=\"녹 색\", command=change_color_green)\n",
        "button.pack()\n",
        "button = Button(window, text=\"노란색\", command=change_color_yellow)\n",
        "button.pack()\n",
        "window.mainloop()\n",
        "\n",
        "from tkinter import *\n",
        "import random\n",
        "def show(char):\n",
        "display.delete(0,END)\n",
        "display.insert(0,\"단어를 추측하시오:\")\n",
        "global blanked\n",
        "\n",
        "blanked = 0\n",
        "global guesses\n",
        "for char in word:\n",
        "if char in guesses:\n",
        "display.insert(END,char)\n",
        "else:\n",
        "display.insert(END,\"_ \")\n",
        "blanked += 1\n",
        "def click(char):\n",
        "show(char)\n",
        "global turns\n",
        "global label\n",
        "global blanked\n",
        "if blanked == 0:\n",
        "label = Label(root, text = \"사용자 승리\",width = 20, height=1, fg=\"red\",\n",
        "relief=\"solid\")\n",
        "label.grid(row=row_index,column=col_index,columnspan=5)\n",
        "chooseWord()\n",
        "return\n",
        "if char not in word:\n",
        "turns -= 1\n",
        "label = Label(root,text=str(turns)+\"번의 기회가 남았음!\", width=20, height=1,\n",
        "fg=\"red\", relief=\"solid\")\n",
        "label.grid(row=row_index,column=col_index, columnspan=5)\n",
        "if turns <= 0:\n",
        "label = Label(root, text = \"사용자 패배\", width = 20, height=1, fg = \"red\",\n",
        "relief = \"solid\")\n",
        "label.grid(row=row_index, column = col_index, columnspan=5)\n",
        "chooseWord()\n",
        "return\n",
        "def chooseWord():\n",
        "global word\n",
        "global turns\n",
        "turns = 10\n",
        "global guesses\n",
        "guesses = \"\"\n",
        "global label\n",
        "label = Label(root,text=str(turns)+\"번의 기회가 남았음!\", width=20, height=1,\n",
        "fg=\"red\", relief=\"solid\")\n",
        "infile = open(\"words.txt\",\"r\")\n",
        "lines = infile.readlines()\n",
        "word = random.choice(lines)\n",
        "word = word.replace(\" \",\"\")\n",
        "word = word.replace(\"\\n\",\"\")\n",
        "show(\"\")\n",
        "root = Tk()\n",
        "root.title(\"Hangman Game\")\n",
        "root.geometry(\"300x225\")\n",
        "display = Entry(root, width=33, bg=\"yellow\")\n",
        "display.grid(row=0,column=0,columnspan=5)\n",
        "guesses = \"\"\n",
        "turns = 10\n",
        "word=\"\"\n",
        "chooseWord()\n",
        "button_list =\n",
        "['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n",
        "row_index=1\n",
        "col_index=0\n",
        "blanked = 0\n",
        "display.delete(0,END)\n",
        "display.insert(0,\"단어를 추측하시오:\")\n",
        "show(\"\")\n",
        "for button_text in button_list:\n",
        "def process(guess=button_text):\n",
        "global guesses\n",
        "global turns\n",
        "guesses += guess\n",
        "click(guess)\n",
        "Button(root,text=button_text,width=5,command=process).grid(row=row_index,column=c\n",
        "ol_index)\n",
        "col_index += 1\n",
        "if col_index > 4:\n",
        "row_index += 1\n",
        "col_index = 0\n",
        "row_index += 1\n",
        "root.mainloop()\n",
        "\n",
        "import pickle\n",
        "addressBook = {\"names\":[\"김김김\",\"이이이\",\"박박박\",\"홍길동\n",
        "\"],\"mails\":[\"aaa@gmail.com\",\"bbb@gmail.com\",\"ccc@gmail.com\",\"ddd@gmail.com\"],\"addre\n",
        "ss\":[\"seoul\",\"daejeon\",\"daegu\",\"busan\"]}\n",
        "file = open(\"save.p\",\"wb\")\n",
        "pickle.dump(addressBook,file)\n",
        "file.close()\n",
        "file = open(\"save.p\",\"rb\")\n",
        "obj = pickle.load(file)\n",
        "print(obj)\n",
        "\n",
        "\n",
        "from PIL import Image, ImageTk, ImageFilter\n",
        "import tkinter as tk\n",
        "from tkinter import filedialog as fd\n",
        "im = None\n",
        "tk_img = None\n",
        "def open():\n",
        "global im, tk_img\n",
        "fname = fd.askopenfilename()\n",
        "im = Image.open(fname)\n",
        "tk_img = ImageTk.PhotoImage(im)\n",
        "canvas.create_image(250,250,image=tk_img)\n",
        "window.update()\n",
        "def quit():\n",
        "window.quit()\n",
        "def image_rotate():\n",
        "global im, tk_img\n",
        "out = im.rotate(45)\n",
        "tk_img = ImageTk.PhotoImage(out)\n",
        "canvas.create_image(250,250,image=tk_img)\n",
        "window.update()\n",
        "def image_blur():\n",
        "global im, tk_img\n",
        "out = im.filter(ImageFilter.BLUR)\n",
        "tk_img = ImageTk.PhotoImage(out)\n",
        "canvas.create_image(250,250,image=tk_img)\n",
        "window.update()\n",
        "def image_grayscale():\n",
        "global im, tk_img\n",
        "im1 =im.convert('L')\n",
        "tk_img = ImageTk.PhotoImage(im1)\n",
        "canvas.create_image(250,250,image=tk_img)\n",
        "window.update()\n",
        "def image_bin():\n",
        "global im, tk_img\n",
        "im1 =im.convert('1')\n",
        "tk_img = ImageTk.PhotoImage(im1)\n",
        "canvas.create_image(250,250,image=tk_img)\n",
        "window.update()\n",
        "def image_sharp():\n",
        "global im, tk_img\n",
        "out = im.filter(ImageFilter.SHARPEN)\n",
        "tk_img = ImageTk.PhotoImage(out)\n",
        "canvas.create_image(250,250,image=tk_img)\n",
        "window.update()\n",
        "def image_emboss():\n",
        "global im, tk_img\n",
        "out = im.filter(ImageFilter.EMBOSS)\n",
        "tk_img = ImageTk.PhotoImage(out)\n",
        "canvas.create_image(250,250,image=tk_img)\n",
        "window.update()\n",
        "window = tk.Tk()\n",
        "canvas = tk.Canvas(window,width=500,height=500)\n",
        "canvas.pack()\n",
        "menubar = tk.Menu(window)\n",
        "filemenu = tk.Menu(menubar)\n",
        "ipmenu = tk.Menu(menubar)\n",
        "filemenu.add_command(label=\"열기\", command = open)\n",
        "filemenu.add_command(label=\"종료\", command = quit)\n",
        "ipmenu.add_command(label=\"영상회전\", command=image_rotate)\n",
        "ipmenu.add_command(label=\"영상흐리게\", command=image_blur)\n",
        "ipmenu.add_command(label=\"흑백영상\", command=image_grayscale)\n",
        "ipmenu.add_command(label=\"이진화\", command=image_bin)\n",
        "ipmenu.add_command(label=\"영상뚜렷하게\", command=image_sharp)\n",
        "ipmenu.add_command(label=\"엠보스\", command=image_emboss)\n",
        "menubar.add_cascade(label=\"파일\",menu=filemenu)\n",
        "menubar.add_cascade(label=\"영상처리\",menu=ipmenu)\n",
        "window.config(menu=menubar)\n",
        "window.mainloop()\n",
        "\n",
        "from tkinter import *\n",
        "import time\n",
        "class Ball:\n",
        "def __init__(self, canvas, color, size, x, y, xspeed, yspeed):\n",
        "self.canvas = canvas\n",
        "self.color = color\n",
        "self.size = size\n",
        "self.x = x\n",
        "self.y = y\n",
        "self.xspeed = xspeed\n",
        "self.yspeed = yspeed\n",
        "self.id = canvas.create_oval(x,y,x+size, y+size, fill=color)\n",
        "def move(self):\n",
        "self.canvas.move(self.id, self.xspeed, self.yspeed)\n",
        "(x1,y1,x2,y2) = self.canvas.coords(self.id)\n",
        "(self.x,self.y) = (x1,y1)\n",
        "if x1<=0 or x2>=WIDTH:\n",
        "self.xspeed = - self.xspeed\n",
        "if y1<=0 or y2>=HEIGHT:\n",
        "self.yspeed = - self.yspeed\n",
        "WIDTH=800\n",
        "HEIGHT=400\n",
        "window = Tk()\n",
        "canvas = Canvas(window, width = WIDTH,height = HEIGHT)\n",
        "canvas.pack()\n",
        "ball= Ball(canvas, \"red\",30,0,0,30,20)\n",
        "while True:\n",
        "  ball.move()\n",
        "window.update()\n",
        "time.sleep(0.03)\n",
        "\n",
        "from tkinter import *\n",
        "import time\n",
        "import random\n",
        "WIDTH = 800\n",
        "HEIGHT = 400\n",
        "class Ball:\n",
        "def __init__(self,canvas, color,size,x,y,xspeed,yspeed):\n",
        "self.canvas = canvas\n",
        "self.color = color\n",
        "self.size = size\n",
        "self.x = x\n",
        "self.y = y\n",
        "self.xspeed = xspeed\n",
        "self.yspeed = yspeed\n",
        "self.id = canvas.create_oval(x,y,x+size,y+size, fill=color)\n",
        "def move(self):\n",
        "self.canvas.move(self.id, self.xspeed, self.yspeed)\n",
        "(x1,y1,x2,y2) = self.canvas.coords(self.id)\n",
        "(self.x, self.y) = (x1,y1)\n",
        "if x1 <= 0 or x2 >= WIDTH:\n",
        "self.xspeed = -self.xspeed\n",
        "if y1 <= 0 or y2 >= HEIGHT:\n",
        "self.yspeed = -self.yspeed\n",
        "bullets = []\n",
        "def fire(event):\n",
        "bullets.append(Ball(canvas, \"red\",10,150,250,10,0))\n",
        "def getScore(score):\n",
        "score = score + 1\n",
        "return score\n",
        "window = Tk()\n",
        "canvas = Canvas(window, width=WIDTH,height=HEIGHT)\n",
        "canvas.pack()\n",
        "canvas.bind(\"<Button-1>\",fire)\n",
        "score = 0\n",
        "var = StringVar()\n",
        "label = Label(window, textvariable = var, relief = RAISED)\n",
        "spaceship = Ball(canvas,\"green\",100,100,200,0,0)\n",
        "enemy = Ball(canvas,\"red\",100,500,200,0,5)\n",
        "while True:\n",
        "var.set(\"score: \"+str(score))\n",
        "label.pack()\n",
        "for bullet in bullets:\n",
        "bullet.move()\n",
        "if (bullet.x + bullet.size) >= WIDTH:\n",
        "canvas.delete(bullet.id)\n",
        "bullets.remove(bullet)\n",
        "if bullet.x > enemy.x and bullet.x < enemy.x+enemy.size and bullet.y >\n",
        "enemy.y and bullet.y < enemy.y+enemy.size:\n",
        "score = getScore(score)\n",
        "enemy.move()\n",
        "window.update()\n",
        "time.sleep(0.03)\n",
        "\n",
        "from tkinter import *\n",
        "import time\n",
        "import random\n",
        "WIDTH = 800\n",
        "HEIGHT = 400\n",
        "class Ball:\n",
        "def __init__(self,canvas, color,size,x,y,xspeed,yspeed):\n",
        "self.canvas = canvas\n",
        "self.color = color\n",
        "self.size = size\n",
        "self.x = x\n",
        "self.y = y\n",
        "self.xspeed = xspeed\n",
        "self.yspeed = yspeed\n",
        "self.id = canvas.create_oval(x,y,x+size,y+size, fill=color)\n",
        "def move(self):\n",
        "self.canvas.move(self.id, self.xspeed, self.yspeed)\n",
        "(x1,y1,x2,y2) = self.canvas.coords(self.id)\n",
        "(self.x, self.y) = (x1,y1)\n",
        "if x1 <= 0 or x2 >= WIDTH:\n",
        "self.xspeed = -self.xspeed\n",
        "if y1 <= 0 or y2 >= HEIGHT:\n",
        "self.yspeed = -self.yspeed\n",
        "bullets = []\n",
        "def fire(event):\n",
        "bullets.append(Ball(canvas, \"red\",10,150,spaceship.y+50,10,0))\n",
        "def getScore(score):\n",
        "score = score + 1\n",
        "return score\n",
        "def keyPress_UP(event):\n",
        "  spaceship.yspeed = -3\n",
        "def keyPress_Down(event):\n",
        "spaceship.yspeed = +3\n",
        "def keyRelease(event):\n",
        "spaceship.yspeed =0\n",
        "window = Tk()\n",
        "canvas = Canvas(window, width=WIDTH,height=HEIGHT)\n",
        "canvas.pack()\n",
        "canvas.bind(\"<Button-1>\",fire)\n",
        "canvas.bind(\"<KeyPress-Up>\",keyPress_UP)\n",
        "canvas.bind(\"<KeyPress-Down>\",keyPress_Down)\n",
        "canvas.bind(\"<KeyRelease>\",keyRelease)\n",
        "canvas.focus_set()\n",
        "score = 0\n",
        "var = StringVar()\n",
        "label = Label(window, textvariable = var, relief = RAISED)\n",
        "spaceship = Ball(canvas,\"green\",100,100,200,0,0)\n",
        "enemy = Ball(canvas,\"red\",100,500,200,0,5)\n",
        "while True:\n",
        "print(spaceship.yspeed)\n",
        "var.set(\"score: \"+str(score))\n",
        "label.pack()\n",
        "for bullet in bullets:\n",
        "bullet.move()\n",
        "if (bullet.x + bullet.size) >= WIDTH:\n",
        "canvas.delete(bullet.id)\n",
        "bullets.remove(bullet)\n",
        "# 적을 맞추면 점수가 올라간다\n",
        "if bullet.x > enemy.x and bullet.x < enemy.x+enemy.size and bullet.y >\n",
        "enemy.y and bullet.y < enemy.y+enemy.size:\n",
        "score = getScore(score)\n",
        "enemy.move()\n",
        "spaceship.move()\n",
        "print(spaceship.x,spaceship.y)\n",
        "window.update()\n",
        "time.sleep(0.03)\n",
        "\n",
        "from tkinter import *\n",
        "import time\n",
        "import random\n",
        "WIDTH = 800\n",
        "HEIGHT = 400\n",
        "class Ball:\n",
        "def __init__(self,canvas, color,size,x,y,xspeed,yspeed):\n",
        "self.canvas = canvas\n",
        "self.color = color\n",
        "self.size = size\n",
        "self.x = x\n",
        "self.y = y\n",
        "self.xspeed = xspeed\n",
        "self.yspeed = yspeed\n",
        "self.img = None\n",
        "if self.size == 0:\n",
        "if self.color == \"green\":\n",
        "self.img = PhotoImage(file=\"spaceship.png\")\n",
        "self.id = self.canvas.create_image(x,y,anchor=NW,image=self.img)\n",
        "else:\n",
        "self.img = PhotoImage(file=\"spaceship2.png\")\n",
        "self.id = self.canvas.create_image(x,y,anchor=NW,image=self.img)\n",
        "else:\n",
        "self.id = canvas.create_oval(x,y,x+size,y+size, fill=color)\n",
        "def move(self):\n",
        "self.canvas.move(self.id, self.xspeed, self.yspeed)\n",
        "if self.size==0 :\n",
        "(x1,y1) = self.canvas.coords(self.id)\n",
        "(self.x, self.y) = (x1,y1)\n",
        "x2 = x1+100\n",
        "y2 = y1+100\n",
        "else:\n",
        "(x1,y1,x2,y2) = self.canvas.coords(self.id)\n",
        "(self.x, self.y) = (x1,y1)\n",
        "if x1 <= 0 or x2 >= WIDTH:\n",
        "print(\"check1\")\n",
        "self.xspeed = -self.xspeed\n",
        "if y1 <= 0 or y2 >= HEIGHT:\n",
        "print(\"check2\")\n",
        "self.yspeed = -self.yspeed.\n",
        "bullets = []\n",
        "def fire(event):\n",
        "bullets.append(Ball(canvas, \"red\",10,150,spaceship.y+50,10,0))\n",
        "def getScore(score):\n",
        "score = score + 1\n",
        "return score\n",
        "def keyPress_UP(event):\n",
        "spaceship.yspeed = -3\n",
        "def keyPress_Down(event):\n",
        "spaceship.yspeed = +3\n",
        "def keyRelease(event):\n",
        "spaceship.yspeed =0\n",
        "window = Tk()\n",
        "canvas = Canvas(window, width=WIDTH,height=HEIGHT)\n",
        "canvas.pack()\n",
        "canvas.bind(\"<Button-1>\",fire)\n",
        "canvas.bind(\"<KeyPress-Up>\",keyPress_UP)\n",
        "canvas.bind(\"<KeyPress-Down>\",keyPress_Down)\n",
        "canvas.bind(\"<KeyRelease>\",keyRelease)\n",
        "canvas.focus_set()\n",
        "score = 0\n",
        "var = StringVar()\n",
        "label = Label(window, textvariable = var, relief = RAISED)\n",
        "\n",
        "spaceship = Ball(canvas,\"green\",0,100,200,0,0)\n",
        "enemy = Ball(canvas,\"red\",0,500,200,0,5)\n",
        "while True:\n",
        "var.set(\"score: \"+str(score))\n",
        "label.pack()\n",
        "for bullet in bullets:\n",
        "bullet.move()\n",
        "if (bullet.x + bullet.size) >= WIDTH:\n",
        "canvas.delete(bullet.id)\n",
        "bullets.remove(bullet)\n",
        "if bullet.x > enemy.x and bullet.x < enemy.x+100 and bullet.y > enemy.y\n",
        "and bullet.y < enemy.y+100:\n",
        "score = getScore(score)\n",
        "enemy.move()\n",
        "spaceship.move()\n",
        "window.update()\n",
        "time.sleep(0.03)\n",
        "\n",
        "from tkinter import *\n",
        "import time\n",
        "import random\n",
        "WIDTH = 800\n",
        "HEIGHT = 400\n",
        "class Ball:\n",
        "def __init__(self,canvas, color,size,x,y,xspeed,yspeed):\n",
        "self.canvas = canvas\n",
        "self.color = color\n",
        "self.size = size\n",
        "self.x = x\n",
        "self.y = y\n",
        "self.xspeed = xspeed\n",
        "self.yspeed = yspeed\n",
        "self.img = None\n",
        "if self.size == 0:\n",
        "if self.color == \"green\":\n",
        "self.img = PhotoImage(file=\"spaceship.png\")\n",
        "self.id = self.canvas.create_image(x,y,anchor=NW,image=self.img)\n",
        "else:\n",
        "self.img = PhotoImage(file=\"spaceship2.png\")\n",
        "self.id = self.canvas.create_image(x,y,anchor=NW,image=self.img)\n",
        "else:\n",
        "self.id = canvas.create_oval(x,y,x+size,y+size, fill=color)\n",
        "def move(self):\n",
        "self.canvas.move(self.id, self.xspeed, self.yspeed)\n",
        "if self.size==0 :\n",
        "(x1,y1) = self.canvas.coords(self.id)\n",
        "(self.x, self.y) = (x1,y1)\n",
        "x2 = x1+100\n",
        "y2 = y1+100\n",
        "if self.color == \"red\":\n",
        "self.xspeed = (spaceship.x-self.x)/300\n",
        "self.yspeed = (spaceship.y-self.y)/300\n",
        "else:\n",
        "(x1,y1,x2,y2) = self.canvas.coords(self.id)\n",
        "(self.x, self.y) = (x1,y1)\n",
        "if x1 <= 0 or x2 >= WIDTH:\n",
        "print(\"check1\")\n",
        "self.xspeed = -self.xspeed\n",
        "if y1 <= 0 or y2 >= HEIGHT:\n",
        "print(\"check2\")\n",
        "self.yspeed = -self.yspeed\n",
        "bullets = []\n",
        "def fire(event):\n",
        "bullets.append(Ball(canvas, \"red\",10,150,spaceship.y+50,10,0))\n",
        "def getScore(score):\n",
        "score = score + 1\n",
        "return score\n",
        "def keyPress_UP(event):\n",
        "spaceship.yspeed = -3\n",
        "def keyPress_Down(event):\n",
        "spaceship.yspeed = +3\n",
        "def keyRelease(event):\n",
        "spaceship.yspeed =0\n",
        "window = Tk()\n",
        "canvas = Canvas(window, width=WIDTH,height=HEIGHT)\n",
        "canvas.pack()\n",
        "canvas.bind(\"<Button-1>\",fire)\n",
        "canvas.bind(\"<KeyPress-Up>\",keyPress_UP)\n",
        "canvas.bind(\"<KeyPress-Down>\",keyPress_Down)\n",
        "canvas.bind(\"<KeyRelease>\",keyRelease)\n",
        "canvas.focus_set()\n",
        "score = 0\n",
        "var = StringVar()\n",
        "label = Label(window, textvariable = var, relief = RAISED)\n",
        "spaceship = Ball(canvas,\"green\",0,100,200,0,0)\n",
        "enemy = Ball(canvas,\"red\",0,500,200,0,5)\n",
        "while True:\n",
        "var.set(\"score: \"+str(score))\n",
        "label.pack()\n",
        "for bullet in bullets:\n",
        "bullet.move()\n",
        "if (bullet.x + bullet.size) >= WIDTH:\n",
        "canvas.delete(bullet.id)\n",
        "bullets.remove(bullet)\n",
        "if bullet.x > enemy.x and bullet.x < enemy.x+100 and bullet.y > enemy.y\n",
        "and bullet.y < enemy.y+100:\n",
        "score = getScore(score)\n",
        "enemy.move()\n",
        "spaceship.move()\n",
        "window.update()\n",
        "time.sleep(0.03)"
      ]
    }
  ]
}
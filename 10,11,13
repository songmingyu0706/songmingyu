{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled5.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyOyxdJe8nr4ChITB4Znl0ZJ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/songmingyu0706/songmingyu/blob/main1/10%2C11%2C13\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wa1S63KZtdXo"
      },
      "outputs": [],
      "source": [
        "from tkinter import *\n",
        "fields = '이름', '직업', '국적'\n",
        "def fetch(entries):\n",
        "for entry in entries:\n",
        "field = entry[0]\n",
        "text = entry[1].get()\n",
        "print('%s: \"%s\"' % (field, text))\n",
        "def makeform(root, fields):\n",
        "entries = []\n",
        "for field in fields:\n",
        "row = Frame(root)\n",
        "lab = Label(row, width=15, text=field)\n",
        "ent = Entry(row)\n",
        "row.pack(side=TOP, fill=X)\n",
        "lab.pack(side=LEFT)\n",
        "ent.pack(side=RIGHT, expand=YES, fill=X)\n",
        "entries.append((field, ent))\n",
        "return entries\n",
        "root = Tk()\n",
        "ents = makeform(root, fields)\n",
        "root.bind('<Return>', (lambda event, e=ents: fetch(e)))\n",
        "b1 = Button(root, text='보여주기',\n",
        "command=(lambda e=ents: fetch(e)))\n",
        "b1.pack(side=LEFT, padx=5, pady=5)\n",
        "b2 = Button(root, text='종료하기', command=root.quit)\n",
        "b2.pack(side=LEFT, padx=5, pady=5)\n",
        "root.mainloop()\n",
        "\n",
        "from tkinter import *\n",
        "window = Tk()\n",
        "label1 = Label(window, text=\"로그인 하세요!!!\", font=(\"Helvetica\", 20))\n",
        "label1.pack()\n",
        "label2 = Label(window, text=\"아이디\")\n",
        "label2.pack()\n",
        "entry1 = Entry(window)\n",
        "entry1.pack()\n",
        "label2 = Label(window, text=\"패스워드\")\n",
        "label2.pack()\n",
        "entry2 = Entry(window)\n",
        "entry2.pack()\n",
        "button1 = Button(window, text=\"로그인\")\n",
        "button1.pack()\n",
        "window.mainloop()\n",
        "\n",
        "from random import *\n",
        "from tkinter import *\n",
        "def user_choice_rock():\n",
        "user_choice = \"rock\"\n",
        "turn(user_choice)\n",
        "user_image.configure(image=rock_image)\n",
        "def user_choice_paper():\n",
        "user_choice = \"paper\"\n",
        "turn(user_choice)\n",
        "user_image.configure(image=paper_image)\n",
        "def user_choice_scissors():\n",
        "user_choice = \"scissors\"\n",
        "turn(user_choice)\n",
        "user_image.configure(image=scissors_image)\n",
        "def turn(user_choice):\n",
        "oppo = ['rock', 'paper', 'scissors']\n",
        "oppo_choice=oppo[randint(0,2)]\n",
        "if(oppo_choice=='rock'):\n",
        "oppo_image.configure(image=rock_image)\n",
        "if(user_choice=='paper'):\n",
        "turn_result.configure(text=\"사용자 승!\", fg=\"green\")\n",
        "compare.configure(text=\">>>>>\")\n",
        "elif(user_choice=='scissors'):\n",
        "turn_result.configure(text=\"컴퓨터 승!\", fg=\"red\")\n",
        "compare.configure(text=\"<<<<<\")\n",
        "else:\n",
        "turn_result.configure(text=\"무승부\", fg=\"gray\")\n",
        "compare.configure(text=\"=====\")\n",
        "elif(oppo_choice=='paper'):\n",
        "oppo_image.configure(image=paper_image)\n",
        "if(user_choice=='scissors'):\n",
        "turn_result.configure(text=\"사용자 승!\", fg=\"green\")\n",
        "compare.configure(text=\">>>>>\")\n",
        "elif(user_choice=='rock'):\n",
        "turn_result.configure(text=\"컴퓨터 승!\", fg=\"red\")\n",
        "compare.configure(text=\"<<<<<\")\n",
        "else:\n",
        "turn_result.configure(text=\"무승부\", fg=\"gray\")\n",
        "compare.configure(text=\"=====\")\n",
        "elif(oppo_choice=='scissors'):\n",
        "oppo_image.configure(image=scissors_image)\n",
        "if(user_choice=='rock'):\n",
        "turn_result.configure(text=\"사용자 승!\", fg=\"green\")\n",
        "compare.configure(text=\">>>>>\")\n",
        "elif(user_choice=='paper'):\n",
        "turn_result.configure(text=\"컴퓨터 승!\", fg=\"red\")\n",
        "compare.configure(text=\"<<<<<\")\n",
        "else:\n",
        "turn_result.configure(text=\"무승부\", fg=\"gray\")\n",
        "compare.configure(text=\"=====\")\n",
        "main_window = Tk()\n",
        "rock_button = Button(main_window, width=20, text=\"바위\", justify=CENTER,\n",
        "command=user_choice_rock, activebackground='black', activeforeground='white')\n",
        "paper_button = Button(main_window, width=20, text=\"보\", justify=CENTER,\n",
        "command=user_choice_paper, activebackground='black', activeforeground='white')\n",
        "scissors_button = Button(main_window, width=20, text=\"가위\", justify=CENTER,\n",
        "command=user_choice_scissors, activebackground='black', activeforeground='white')\n",
        "rock_image = PhotoImage(file=\"d:/rock.gif\")\n",
        "paper_image = PhotoImage(file=\"d:/paper.gif\")\n",
        "scissors_image = PhotoImage(file=\"d:/scissors.gif\")\n",
        "user_image = Label(text=\"사용자\", image=rock_image)\n",
        "user_image.image = rock_image\n",
        "compare = Label(main_window, justify=CENTER, font=(\"Helvetica\", 30))\n",
        "oppo_image = Label(text=\"컴퓨터\",image=paper_image)\n",
        "oppo_image.image = paper_image\n",
        "turn_result = Label(main_window, width=20, justify=CENTER, font=(\"Helvetica\", 20))\n",
        "rock_button.grid(row=5, column=1)\n",
        "paper_button.grid(row=5, column=2)\n",
        "scissors_button.grid(row=5, column=3)\n",
        "user_image.grid(row=3, column=1)\n",
        "compare.grid(row=3, column=2)\n",
        "oppo_image.grid(row=3, column=3)\n",
        "turn_result.grid(row=4, column=2)\n",
        "main_window.mainloop()\n",
        "\n",
        "filename = input(\"파일 이름을 입력하세요: \").strip()\n",
        "infile = open(filename, \"r\")\n",
        "count = 0\n",
        "for line in infile:\n",
        "for ch in line:\n",
        "count += 1\n",
        "print(\"파일 안에는 총 \", count , \"개의 글자가 있습니다.\")\n",
        "infile.close() \n",
        "\n",
        "infilename = input(\"파일 이름을 입력하시오: \").strip()\n",
        "infile = open(infilename, \"r\")\n",
        "file_s = infile.read()\n",
        "removed_s = input(\"삭제할 문자열을 입력하시오: \").strip()\n",
        "modified_s = file_s.replace(removed_s, \"\")\n",
        "infile.close()\n",
        "outfile = open(infilename, \"w\")\n",
        "print(modified_s, file = outfile, end = \"\")\n",
        "print(\"변경된 파일이 저장되었습니다.\")\n",
        "outfile.close()\n",
        "\n",
        "infile = open(filename, \"r\")\n",
        "for line in infile:\n",
        "...\n",
        "def countLine(line, counter):\n",
        "for ch in line:\n",
        "if ch.isalpha():\n",
        "if ch in counter:\n",
        "counter[ch] = counter[ch] + 1\n",
        "else:\n",
        "counter[ch] = 1\n",
        "fname = input(\"입력 파일 이름: \").strip()\n",
        "infile = open(fname, \"r\")\n",
        "my_dict = { }\n",
        "for line in infile:\n",
        "countLine(line, my_dict)\n",
        "print(my_dict)\n",
        "infile.close()\n",
        "\n",
        "import pickle\n",
        "outfile = open(\"test.dat\", \"wb\")\n",
        "pickle.dump(12, outfile)\n",
        "pickle.dump(3.14, outfile)\n",
        "pickle.dump([1, 2, 3, 4, 5], outfile)\n",
        "outfile.close()\n",
        "infile = open(\"test.dat\", \"rb\")\n",
        "print(pickle.load(infile))\n",
        "print(pickle.load(infile))\n",
        "print(pickle.load(infile))\n",
        "infile.close()\n",
        "\n",
        "inFileName = input(\"입력 파일 이름: \")\n",
        "outFileName = input(\"출력 파일 이름: \")\n",
        "infile = open(inFileName, \"r\")\n",
        "outfile = open(outFileName, \"w\")\n",
        "total = 0.0\n",
        "count = 0\n",
        "line = infile.readline()\n",
        "while line != \"\" :\n",
        "value = float(line)\n",
        "total = total + value\n",
        "count = count + 1\n",
        "line = infile.readline()\n",
        "outfile.write(\"합계=\"+ str(total)+\"\\n\")\n",
        "avg = total / count\n",
        "outfile.write(\"평균=\"+ str(avg)+\"\\n\")\n",
        "infile.close()\n",
        "outfile.close()\n",
        "\n",
        "import pickle\n",
        "from tkinter import *\n",
        "phone_book = { }\n",
        "current = 0\n",
        "\n",
        "name = \"\"\n",
        "phone = \"\"\n",
        "window = Tk()\n",
        "frame1 = Frame(window)\n",
        "frame1.pack()\n",
        "Label(frame1, text = \"이름 \").grid(row = 1, column = 1, sticky = W)\n",
        "nameEntry = Entry(frame1, textvariable = name, width = 30)\n",
        "nameEntry.grid(row = 1, column = 2)\n",
        "frame2 = Frame(window)\n",
        "frame2.pack()\n",
        "Label(frame2, text = \"전화번호\").grid(row = 1, column = 1, sticky = W)\n",
        "phoneEntry = Entry(frame2, textvariable = phone, width = 30)\n",
        "phoneEntry.grid(row = 1, column = 2)\n",
        "frame3 = Frame(window)\n",
        "frame3.pack()\n",
        "def save():\n",
        "outfile = open(\"phonebook.dat\", \"wb\")\n",
        "pickle.dump(phone_book, outfile)\n",
        "print(\"주소들이 파일에 저장되었습니다\")\n",
        "outfile.close()\n",
        "def load():\n",
        "infile = open(\"phonebook.dat\", \"rb\")\n",
        "phone_book = pickle.load(infile)\n",
        "infile.close()\n",
        "print(\"파일에서 주소를 읽었습니다.\")\n",
        "go_first()\n",
        "def add():\n",
        "phone_book[nameEntry.get()] = phoneEntry.get()\n",
        "print(phone_book)\n",
        "save()\n",
        "def go_first():\n",
        "global current\n",
        "current = 0\n",
        "ks = list(phone_book)\n",
        "print(phone_book)\n",
        "nameEntry.delete(0, END)\n",
        "nameEntry.insert(0, ks[current])\n",
        "phoneEntry.delete(0, END)\n",
        "phoneEntry.insert(0, phone_book[ks[current]])\n",
        "def go_next():\n",
        "global current\n",
        "current += 1\n",
        "ks = list(phone_book)\n",
        "nameEntry.delete(0, END)\n",
        "nameEntry.insert(0, ks[current])\n",
        "phoneEntry.delete(0, END)\n",
        "phoneEntry.insert(0, phone_book[ks[current]])\n",
        "def go_previous():\n",
        "print(\"구현되지 않았음\")\n",
        "def go_last():\n",
        "print(\"구현되지 않았음\")\n",
        "b1 = Button(frame3, text = \"추가\", command = add).grid(row = 1, column = 1)\n",
        "b2 = Button(frame3, text = \"처음\", command = go_first).grid(row = 1, column = 2)\n",
        "b3 = Button(frame3, text = \"다음\", command = go_next).grid(row = 1, column = 3)\n",
        "b4 = Button(frame3, text = \"이전\", command =go_previous).grid(row = 1, column = 4)\n",
        "b5 = Button(frame3, text = \"마지막\", command = go_last).grid(row = 1, column = 5)\n",
        "b6 = Button(frame3, text = \"파일 읽기\", command = load).grid(row = 1, column = 6)\n",
        "window.mainloop()\n",
        "\n",
        "class Circle:\n",
        "def __init__(self, radius):\n",
        "self.radius = radius\n",
        "def calcPerimeter(self):\n",
        "return 2 * 3.141592 * self.radius\n",
        "def calcArea(self):\n",
        "return 3.141592* self.radius*self.radius\n",
        "circle = Circle(100)\n",
        "print(\"반지름: \", circle.radius,\n",
        "\"원의 면적: \", circle.calcArea(),\n",
        "\"원의 둘레: \", circle.calcPerimeter() );\n",
        "\n",
        "class TV:\n",
        "def __init__(self):\n",
        "self.channel = 1\n",
        "...\n",
        "def turnOn(self):\n",
        "  class TV:\n",
        "def __init__(self):\n",
        "self.channel = 1\n",
        "self.volume = 0\n",
        "self.on = False\n",
        "def turnOn(self):\n",
        "self.on = True\n",
        "def turnOff(self):\n",
        "self.on = False\n",
        "def setVolume(self, volume):\n",
        "self.volume = volume\n",
        "def setChannel(self, channel):\n",
        "self.channel = channel\n",
        "tv = TV()\n",
        "tv.turnOn()\n",
        "tv.setChannel(11)\n",
        "tv.setVolume(6)\n",
        "print(\"TV의 채널: \", tv.channel, \"TV의 음량:\", tv.volume);\n",
        "\n",
        "import turtle\n",
        "lee = turtle.Pen()\n",
        "park = turtle.Pen()\n",
        "lee.shape(\"turtle\")\n",
        "lee.forward(100)\n",
        "lee.right(90)\n",
        "lee.forward(20)\n",
        "lee.left(90)\n",
        "lee.forward(100)\n",
        "park.shape(\"circle\")\n",
        "park.forward(-100)\n",
        "park.right(90)\n",
        "park.forward(-20)\n",
        "park.left(90)\n",
        "park.forward(-100)\n",
        "\n",
        "import turtle\n",
        "class MyTurtle(turtle.Turtle):\n",
        "def drawSquare(self):\n",
        "for i in range(4):\n",
        "self.right(90)\n",
        "self.forward(100)\n",
        "my_turtle = MyTurtle()\n",
        "my_turtle.forward(100)\n",
        "my_turtle.drawSquare()"
      ]
    }
  ]
}